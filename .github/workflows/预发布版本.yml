name: 编译预发布版本vnt-cli

on:
  workflow_dispatch:
    inputs:
      tag:
        description: '发布prerelease的版本号'
        required: true
        default: '9.9.9'
      branch:
        description: '编译vnt-cli的vnt-dev/vnt分支或版本号，默认主分支main'
        required: true
        default: 'main'
      cmd:
        description: '编译vnt-cli的额外模块参数默认只有openssl-vendored 需要的直接填,websocket'
        required: false
        default: ',wss'

env:
  CARGO_TERM_COLOR: always
  TZ: Asia/Shanghai
  tag: "${{ github.event.inputs.tag }}"
  branch: "${{ github.event.inputs.branch }}"
  cmd: "${{ github.event.inputs.cmd }}"
jobs:
 build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - TARGET: aarch64-unknown-linux-musl
            OS: ubuntu-latest
            FEATURES: ring-cipher,openssl-vendored
            STRIP: aarch64-linux-musl-strip
          - TARGET: armv7-unknown-linux-musleabihf
            OS: ubuntu-latest
            FEATURES: openssl-vendored
            STRIP: armv7l-linux-musleabihf-strip
          - TARGET: armv7-unknown-linux-musleabi
            OS: ubuntu-latest
            FEATURES: openssl-vendored
            STRIP: armv7m-linux-musleabi-strip
          - TARGET: armv7-unknown-linux-gnueabihf
            OS: ubuntu-latest
            FEATURES: ring-cipher,openssl-vendored,wss
            STRIP: /opt/arm-unknown-linux-gnueabi/bin/arm-unknown-linux-gnueabi-strip
          - TARGET: arm-unknown-linux-musleabihf
            OS: ubuntu-latest
            FEATURES: ring-cipher,openssl-vendored
            STRIP: arm-linux-musleabihf-strip
          - TARGET: arm-unknown-linux-musleabi
            OS: ubuntu-latest
            FEATURES: ring-cipher,openssl-vendored
            STRIP: arm-linux-musleabi-strip
          - TARGET: mipsel-unknown-linux-musl
            OS: ubuntu-latest
            FEATURES: openssl-vendored,ring-cipher
            STRIP: mipsel-linux-muslsf-strip
          - TARGET: mips-unknown-linux-musl
            OS: ubuntu-latest
            FEATURES: openssl-vendored
            STRIP: mips-linux-muslsf-strip
          - TARGET: i686-unknown-linux-musl
            OS: ubuntu-latest
            FEATURES: ring-cipher,openssl-vendored
            STRIP: i686-linux-musl-strip
          - TARGET: x86_64-unknown-linux-musl
            OS: ubuntu-latest
            FEATURES: ring-cipher,openssl-vendored
            STRIP: x86_64-linux-musl-strip
    runs-on: ${{ matrix.OS }}
    env:
      NAME: vnt-cli_${{ matrix.TARGET }}
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
      STRIP: ${{ matrix.STRIP }}
      FEATURES: ${{ matrix.FEATURES }}
    steps:
      - name: 设置编译环境
        run: |
            case $TARGET in 
              mipsel-unknown-linux-musl)
                MUSL_URI=mipsel-linux-muslsf-cross
                URL=mipsel-linux-muslsf
                ;;
              aarch64-unknown-linux-musl)
                MUSL_URI=aarch64-linux-musl-cross
                ;;
              armv7-unknown-linux-musleabihf)
                MUSL_URI=armv7l-linux-musleabihf-cross
                ;;
              armv7-unknown-linux-musleabi)
                MUSL_URI=armv7m-linux-musleabi-cross
                ;;
              arm-unknown-linux-musleabihf)
                MUSL_URI=arm-linux-musleabihf-cross
                ;;
              arm-unknown-linux-musleabi)
                MUSL_URI=arm-linux-musleabi-cross
                ;;
              mips-unknown-linux-musl)
                MUSL_URI=mips-linux-muslsf-cross
                URL=mips-linux-muslsf
                ;;
              i686-unknown-linux-musl)
                MUSL_URI=i686-linux-musl-cross
                ;;
              x86_64-unknown-linux-musl)
                MUSL_URI=x86_64-linux-musl-cross
                ;;
            esac
              echo "MUSL_URI=${MUSL_URI}" >> $GITHUB_ENV
              mkdir -p /opt/musl_gcc 
              if [ "$TARGET" = "armv7-unknown-linux-gnueabihf" ] ; then 
                wget -q -c https://github.com/lmq8267/vnt/releases/download/1.2.1/armada370-gcc493_glibc220_hard-GPL.txz -P /opt/
                tar -Jxf /opt/armada370-gcc493_glibc220_hard-GPL.txz -C /opt/
              else
              wget -c https://musl.cc/$MUSL_URI.tgz -P /opt/musl_gcc/
              tar zxf /opt/musl_gcc/$MUSL_URI.tgz -C /opt/musl_gcc/
              sudo ln -s /opt/musl_gcc/$MUSL_URI/bin/*gcc /usr/bin/
              fi
            if [[ $TARGET == mips-unknown-linux-musl ]] || [[ $TARGET == mipsel-unknown-linux-musl ]] ; then
              #rustup install 1.72.1
              #rustup default 1.72.1
              cd /opt/musl_gcc/${URL}-cross/lib/gcc/${URL}/11.2.1
              cp libgcc_eh.a libunwind.a
              rustup toolchain install nightly-x86_64-unknown-linux-gnu
              rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
              RUST_LIB_SRC=$HOME/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/
              if [[ -f $RUST_LIB_SRC/library/Cargo.lock && ! -f $RUST_LIB_SRC/Cargo.lock ]]; then 
                 cp -f $RUST_LIB_SRC/library/Cargo.lock $RUST_LIB_SRC/Cargo.lock
              fi
            fi
            sudo timedatectl set-timezone "Asia/Shanghai"
            cat >>~/.cargo/config <<EOF
            [target.i686-unknown-linux-musl]
            linker = "i686-linux-musl-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.x86_64-unknown-linux-musl]
            linker = "x86_64-linux-musl-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.aarch64-unknown-linux-musl]
            linker = "aarch64-linux-musl-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.armv7-unknown-linux-musleabihf]
            linker = "armv7l-linux-musleabihf-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.armv7-unknown-linux-musleabi]
            linker = "armv7m-linux-musleabi-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.armv7-unknown-linux-gnueabihf]
            linker = "/opt/arm-unknown-linux-gnueabi/bin/arm-unknown-linux-gnueabi-gcc"
            rustflags = ["-C", "strip=symbols"]
            [target.arm-unknown-linux-musleabihf]
            linker = "arm-linux-musleabihf-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.arm-unknown-linux-musleabi]
            linker = "arm-linux-musleabi-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.mipsel-unknown-linux-musl]
            linker = "mipsel-linux-muslsf-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols","-C", "link-arg=-static",
            "-C", "relocation-model=static","-C", "link-arg=-no-pie","--cfg", "compiler_builtins_no_debug",
            "-L", "/opt/musl_gcc/mipsel-linux-muslsf-cross/mipsel-linux-muslsf/lib",
            "-L", "/opt/musl_gcc/mipsel-linux-muslsf-cross/lib/gcc/mipsel-linux-muslsf/11.2.1"]
            [target.mips-unknown-linux-musl]
            linker = "mips-linux-muslsf-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols","-C", "link-arg=-static",
            "-C", "relocation-model=static","-C", "link-arg=-no-pie","--cfg", "compiler_builtins_no_debug",
            "-L", "/opt/musl_gcc/mips-linux-muslsf-cross/mips-linux-muslsf/lib",
            "-L", "/opt/musl_gcc/mips-linux-muslsf-cross/lib/gcc/mips-linux-muslsf/11.2.1"]  
            EOF
      - name: 添加编译平台
        if: ${{ ! startsWith(matrix.TARGET, 'mips') }}
        run: rustup target add $TARGET
      - name: 开始编译
        run: |
          git clone -b ${{ env.branch }} https://github.com/vnt-dev/vnt /opt/vnt
          cd /opt/vnt
          #if [[ $TARGET == aarch64-unknown-linux-musl ]] || [[ $TARGET == armv7-unknown-linux-musleabi ]] || [[ $TARGET == arm-unknown-linux-musleabi ]] ; then
          #sed -i '/let path = std::env::current_exe()/d' ./vnt-cli/src/main.rs
          #sed -i '/.expect("current_exe error")/d' ./vnt-cli/src/main.rs
          #sed -i '/.parent()/d' ./vnt-cli/src/main.rs
          #sed -i '/.expect("current_exe parent error")/d' ./vnt-cli/src/main.rs
          #sed -i 's|.join("env");|let path = PathBuf::from("/tmp");|g' ./vnt-cli/src/main.rs
          #fi
          #echo "tag=$(grep -o 'version = "[^"]*' ./common/Cargo.toml | sed 's/version = "//')" >> $GITHUB_ENV
          #修改为中文
          sed -i 's|en.to_string|zh.to_string|g' ./common/src/cli.rs
          sed -i 's|en-US|zh|g' ./common/src/cli.rs
          cmd=$(echo $cmd | tr -d ' ')
          if [[ $TARGET =~ ^mips.*$ ]]; then
            cargo +nightly build --package vnt-cli --release --target $TARGET -Z build-std=std,panic_abort --features ${FEATURES}${cmd}
          else
            cargo build --package vnt-cli --release --target $TARGET --features ${FEATURES}${cmd}
          fi
          ldd ./target/$TARGET/release/vnt-cli || true
          file ./target/$TARGET/release/vnt-cli || true
      - name: Install UPX
        uses: crazy-max/ghaction-upx@v3
        with:
          version: latest
          install-only: true
      - name: 打包压缩
        run: |
          mkdir -p /opt/upx
          if [ "$TARGET" = "armv7-unknown-linux-gnueabihf" ] ; then  
            mv /opt/vnt/target/${TARGET}/release/vnt-cli /opt/upx/vnt-cli-synology-DS_213j
          else
            mv /opt/vnt/target/${TARGET}/release/vnt-cli /opt/upx/${NAME}
            cd /opt/upx
            /opt/musl_gcc/${{ env.MUSL_URI }}/bin/${STRIP} ${NAME}
            upx --lzma --best ${NAME}
            if [[ $TARGET == arm-unknown-linux-musleabi ]]; then
            cd /opt/vnt
            cargo clean
            wget -q -c https://github.com/lmq8267/vnt-cli/releases/download/Armada370-ToolChain/ddwrt-arm_cortex-a9_gcc-13.1.0_musl_eabi.tar.gz -P /opt/musl_gcc/
            tar zxf /opt/musl_gcc/ddwrt-arm_cortex-a9_gcc-13.1.0_musl_eabi.tar.gz -C /opt/musl_gcc/
            export PATH=$PATH:/opt/musl_gcc/toolchain-arm_cortex-a9_gcc-13.1.0_musl_eabi/bin
            echo "" > ~/.cargo/config
            cat >>~/.cargo/config <<EOF
          [target.arm-unknown-linux-musleabi]
          linker = "arm-openwrt-linux-muslgnueabi-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
          EOF
            cmd=$(echo $cmd | tr -d ' ')
            cargo build --package vnt-cli --release --target arm-unknown-linux-musleabi --features ring-cipher,openssl-vendored${cmd}
            mv /opt/vnt/target/arm-unknown-linux-musleabi/release/vnt-cli /opt/upx/vnt-cli_ddwrt-arm_cortex-a9
            cd /opt/upx
            arm-openwrt-linux-muslgnueabi-strip vnt-cli_ddwrt-arm_cortex-a9
            upx --lzma --best vnt-cli_ddwrt-arm_cortex-a9
            fi
          fi
          echo "build_time=$(date '+%Y年%m月%d日%H:%M:%S' | jq -sRr @uri)" >> $GITHUB_ENV
      - name: 发布
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.c8 }}
          body: |
           > ### ![](https://img.shields.io/badge/%E7%BC%96%E8%AF%91%E6%97%B6%E9%97%B4-${{ env.build_time }}-8267?logo=github&labelColor=%E9%A1%BB)![](https://img.shields.io/github/downloads/${{ github.repository }}/${{ env.tag }}/total?label=%E4%B8%8B%E8%BD%BD%E6%AC%A1%E6%95%B0&logo=github)![](https://img.shields.io/docker/image-size/lmq8267/vnt/${{ env.tag }}?label=%E9%95%9C%E5%83%8F%E5%A4%A7%E5%B0%8F&link=https%3A%2F%2Fhub.docker.com%2Fr%2Flmq8267%2Fvnt&logo=docker)
           
           这是预发布版本，各平台的压缩版程序
           
           -musleabi：只支持软件浮点的设备
           -musleabihf：支持硬件浮点的设备
           
           [官方更新说明](https://github.com/vnt-dev/vnt/releases)
           
          tag_name: ${{ env.tag }}
          prerelease: true
          files: |
              /opt/upx/*
      - 
       name: 删除工作流
       uses: GitRML/delete-workflow-runs@main
       with:
        token: ${{ secrets.c8 }}
        retain_days: 2
        keep_minimum_runs: 1
